{
  "type": "ResearchNotebook",
  "version": "1.0",
  "cells": [
    {
      "type": "h1",
      "source": "Research Notebook"
    },
    {
      "type": "text",
      "source": "Version 0.04.02"
    },
    {
      "type": "h2",
      "source": "Introduction"
    },
    {
      "type": "text",
      "source": "Research Notebook is a cross-platform, self-contained, interactive computational environment inspired by IPython Notebook, utlizing Javascript engine instead of Python.\n\nThe main goal of Research Notebook development was to provide a simple, cross-platform scripting environment that \"just works\", without the need to delve into the intricacies of the underlying operating system or installing and maintaining additional dependencies.  This tool is not intended, at least initially, to provide rich text or formulae, nor require massive third-party tools like mathplotlib or octave.\n\nA Research Notebook document is a JSON document containing an ordered set of cells which can contain executable Javascript code, text, plots, tables, and images.  Embedded code can be run in place, producing results rendered inline according to the type of the result, be it text output, image, table, or plot.  These results become part of the notebook document, which can be saved or exported to PDF or HTML format.\n"
    },
    {
      "type": "h2",
      "source": "Example"
    },
    {
      "type": "text",
      "source": "In this example, an instance of built-in Java class JImage is created.  This class not only holds an image, but also allows for a wide range of manipulations of that image."
    },
    {
      "type": "js",
      "source": "// programmatically generate a simple image\nim = new JImage(50, 50);\nim.setColor('Dark Orange');\nim.fillRect(10, 10, 10, 10);",
      "sequence": 81,
      "output": [
        {
          "type": "image",
          "image": "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAIAAACRXR/mAAAALUlEQVR42u3OQQkAAAgAMftjZ23gUxA3LsBFAPBW5ZQtW7Zs2bq9BQAAAMC6BrS6mk1/+22QAAAAAElFTkSuQmCC"
        }
      ]
    },
    {
      "type": "h2",
      "source": "Built-in Java Objects"
    },
    {
      "type": "text",
      "source": "Even though the underlying scripting engine is Javascript, the bulk of Notebook functionality is provided by set of built-in Java objects.\nThese objects are:\n\nFS\nIO\nNET\nNB\nOS\nUT"
    },
    {
      "type": "h2",
      "source": "FS"
    },
    {
      "type": "text",
      "source": "FS object provides a platform-independent access to the file system.  The main goal is make it possible for the user to write scripts which will run on any supported OS or file system, producing uniform results, using familiar Javascript control constructs instead of archane and archaic syntax of a native command shell."
    },
    {
      "type": "js",
      "source": "FS",
      "sequence": 79,
      "output": [
        {
          "type": "text",
          "text": "provides access to the filesystem:\n   FS.freeSpace, getFreeSpace(file)   - returns the amount of free space\n   FS.isDirectory(path)               - tests whether the file denoted by this path is a directory\n   FS.isFile(path)                    - tests whether the file denoted by this path is a normal file\n   FS.isHidden(path)                  - tests whether the file denoted by this path is a hidden file\n   FS.lastModified(file)              - returns the file timestamp\n   FS.ls([path],[mode])               - returns the list of files in the current directory\n   FS.pwd()                           - returns the current directory\n   FS.totalSpace, getTotalSpace(file) - returns the amount of total space\n   FS.touch                           - updates the timestamp of a file, creating it if necessary"
        }
      ]
    },
    {
      "type": "js",
      "source": "FS.freeSpace;",
      "sequence": 76,
      "output": [
        {
          "type": "text",
          "text": "172829720576"
        }
      ]
    },
    {
      "type": "js",
      "source": "FS.getFreeSpace(\"h:\");",
      "sequence": 77,
      "output": [
        {
          "type": "text",
          "text": "1505838366720"
        }
      ]
    },
    {
      "type": "js",
      "source": "FS.isDirectory(\"c:\");",
      "sequence": 75,
      "output": [
        {
          "type": "text",
          "text": "true"
        }
      ]
    },
    {
      "type": "js",
      "source": "FS.isFile(\"c:\");",
      "sequence": 78,
      "output": [
        {
          "type": "text",
          "text": "false"
        }
      ]
    },
    {
      "type": "js",
      "source": "FS.isHidden(\"c:\");",
      "sequence": 80,
      "output": [
        {
          "type": "text",
          "text": "false"
        }
      ]
    },
    {
      "type": "js",
      "source": "FS.lastModified(\"c:\");",
      "sequence": 72,
      "output": [
        {
          "type": "text",
          "text": "1420503642978"
        }
      ]
    },
    {
      "type": "text",
      "source": "FS.ls() lists files in the current directory, producing standard output similar to ls -l command on unix."
    },
    {
      "type": "js",
      "source": "FS.ls()",
      "sequence": 67,
      "output": [
        {
          "type": "error",
          "text": "To be implemented..."
        }
      ]
    },
    {
      "type": "text",
      "source": "FS.ls(dir) lists files in the specified directory.  This command understands \"~\" alias as the user home directory."
    },
    {
      "type": "js",
      "source": "FS.ls('~');",
      "sequence": 68,
      "output": [
        {
          "type": "error",
          "text": "To be implemented..."
        }
      ]
    },
    {
      "type": "text",
      "source": "FS.ls(dir, columns) produces a JData object with columns specified by the second argument.  Valid columns are: name, size, time, mode (TBD)."
    },
    {
      "type": "js",
      "source": "FS.ls('~', [ 'name', 'size' ]);",
      "sequence": 69,
      "output": [
        {
          "type": "error",
          "text": "To be implemented..."
        }
      ]
    },
    {
      "type": "text",
      "source": "FS.pwd() returns the name of the current working directory."
    },
    {
      "type": "js",
      "source": "FS.pwd()",
      "sequence": 13,
      "output": [
        {
          "type": "text",
          "text": "C:\\Projects\\Notebook 4"
        }
      ]
    },
    {
      "type": "js",
      "source": "FS.totalSpace",
      "sequence": 33,
      "output": [
        {
          "type": "text",
          "text": "240054759424"
        }
      ]
    },
    {
      "type": "js",
      "source": "FS.getTotalSpace(\"H:\");",
      "sequence": 34,
      "output": [
        {
          "type": "text",
          "text": "2000243589120"
        }
      ]
    },
    {
      "type": "js",
      "source": "FS.touch(\"test.file\");",
      "sequence": 41,
      "output": [
        {
          "type": "text",
          "text": null
        }
      ]
    },
    {
      "type": "h2",
      "source": "IO"
    },
    {
      "type": "js",
      "source": "IO",
      "sequence": 2,
      "output": [
        {
          "type": "text",
          "text": "provides input/output functionality:\n   IO.loadImage(filename) - loads image file\n   IO.loadTable(filename) - loads table from CSV, XLS, or XLSX file"
        }
      ]
    },
    {
      "type": "js",
      "source": "IO.loadTable('examples/small.csv')",
      "sequence": 66,
      "output": [
        {
          "type": "table",
          "columns": [
            "First Name",
            "Last Name",
            "Potential Suicidal Tendency"
          ],
          "rows": [
            [
              "Hugo",
              "Farnsworth",
              ""
            ],
            [
              "Bender",
              "Rodrigues",
              "High"
            ],
            [
              "Leela",
              "Turanga",
              null
            ]
          ]
        }
      ]
    },
    {
      "type": "h2",
      "source": "NET"
    },
    {
      "type": "text",
      "source": "Network-related functionality is provided by the NET object.\nTBD\nNET.get(url)\nNET.post(url, object)\nNET.email(address, subject, text, data)"
    },
    {
      "type": "js",
      "source": "NET",
      "sequence": 3,
      "output": [
        {
          "type": "text",
          "text": "provides network-related functions:\n   NET.get(url) - returns content specified by the URL"
        }
      ]
    },
    {
      "type": "h2",
      "source": "NB"
    },
    {
      "type": "js",
      "source": "NB",
      "sequence": 4,
      "output": [
        {
          "type": "text",
          "text": "this object allows for operations with the notebook application:\n   NB.display(x) - displays an object in the code output section"
        }
      ]
    },
    {
      "type": "js",
      "source": "NB.display('string');",
      "sequence": 11,
      "output": [
        {
          "type": "text",
          "text": "string"
        },
        {
          "type": "text",
          "text": null
        }
      ]
    },
    {
      "type": "h2",
      "source": "OS"
    },
    {
      "type": "text",
      "source": "Access to the operating system functions is provided by the OS object."
    },
    {
      "type": "js",
      "source": "OS",
      "sequence": 16,
      "output": [
        {
          "type": "text",
          "text": "provides access to the following system functions:\n   OS.arch     - returns the OS architecture\n   OS.cpuCount - returns number of processor cores\n   OS.freeMem  - returns the amount of free memory in the JVM\n   OS.hostName - returns the host name\n   OS.maxMem   - returns the maximum amount of memory that the JVM will attempt to use.\n   OS.name     - returns the OS name\n   OS.time     - current time in milliseconds\n   OS.totalMem - returns the total amount of memory in the JVM\n   OS.usedMem  - returns the amount of memory currently being used\n   OS.version  - returns the OS version"
        }
      ]
    },
    {
      "type": "js",
      "source": "OS.arch",
      "sequence": 17,
      "output": [
        {
          "type": "text",
          "text": "amd64"
        }
      ]
    },
    {
      "type": "js",
      "source": "OS.cpuCount",
      "sequence": 1,
      "output": [
        {
          "type": "text",
          "text": "24"
        }
      ]
    },
    {
      "type": "js",
      "source": "OS.freeMem",
      "sequence": 6,
      "output": [
        {
          "type": "text",
          "text": "687189976"
        }
      ]
    },
    {
      "type": "js",
      "source": "OS.hostName",
      "sequence": 15,
      "output": [
        {
          "type": "text",
          "text": "DELL7500"
        }
      ]
    },
    {
      "type": "js",
      "source": "OS.maxMem",
      "sequence": 7,
      "output": [
        {
          "type": "text",
          "text": "11453595648"
        }
      ]
    },
    {
      "type": "js",
      "source": "OS.name",
      "sequence": 16,
      "output": [
        {
          "type": "text",
          "text": "Windows XP"
        }
      ]
    },
    {
      "type": "js",
      "source": "OS.time",
      "sequence": 2,
      "output": [
        {
          "type": "text",
          "text": "1420492182117"
        }
      ]
    },
    {
      "type": "js",
      "source": "OS.totalMem",
      "sequence": 8,
      "output": [
        {
          "type": "text",
          "text": "771751936"
        }
      ]
    },
    {
      "type": "js",
      "source": "OS.usedMem",
      "sequence": 9,
      "output": [
        {
          "type": "text",
          "text": "100668592"
        }
      ]
    },
    {
      "type": "js",
      "source": "OS.version",
      "sequence": 18,
      "output": [
        {
          "type": "text",
          "text": "5.2"
        }
      ]
    },
    {
      "type": "h2",
      "source": "UT"
    },
    {
      "type": "text",
      "source": "Utilitiy methods are available via UT object."
    },
    {
      "type": "js",
      "source": "UT",
      "sequence": 6,
      "output": [
        {
          "type": "text",
          "text": "provides network-related functions:\n   UT.sleep(ms) - sleeps for the specified number of milliseconds"
        }
      ]
    },
    {
      "type": "js",
      "source": "time = OS.time;\nUT.sleep(1234);\nprint(OS.time - time);",
      "sequence": 39,
      "output": [
        {
          "type": "text",
          "text": "1234"
        },
        {
          "type": "text",
          "text": null
        }
      ]
    }
  ]
}