{
  "type": "ResearchNotebook",
  "version": 1,
  "cells": [
    {
      "type": "h1",
      "source": "Research Notebook    研究ノート   ספר הערה מחקר"
    },
    {
      "type": "h2",
      "source": "Introduction"
    },
    {
      "type": "text",
      "source": "Research Notebook is a cross-platform, self-contained, interactive computational environment inspired by IPython Notebook, utlizing Javascript engine instead of Python.\n\nThe main goal of Research Notebook development was to provide a simple, cross-platform scripting environment that \"just works\", without the need to delve into the intricacies of the underlying operating system or installing and maintaining additional dependencies."
    },
    {
      "type": "h2",
      "source": "Images"
    },
    {
      "type": "js",
      "source": "// programmatically generate an image\nb = new JImageBuilder(500, 30);\nsz = 50;\nfor(i=0; i<sz; i++)\n{\n\tb.setColor(UT.hslColor(i/sz, 1.0, 0.5));\n\tb.fillRect(b.width*i/sz, 0, b.width/sz, b.height);\n}\nb.image;",
      "sequence": 142,
      "output": [
        {
          "type": "image",
          "image": "iVBORw0KGgoAAAANSUhEUgAAAfQAAAAeCAIAAABVHHuNAAABa0lEQVR42u3UkZKCUQCA0ctxHMe7HMdxnMdxnMdxHMd5HMdx/77B5ztzZs4znDGNURZplbbpkM7plp7pU95TeaRrOqV92qTfNE9jmqVlWqddOqZLuqdX+pbXVO7pko5pl9ZpmWZlPspP2qR9OqVreqR3msYnPdMtndMhbdMqLcKQu9zlLne5y13ucpe73OUud7nLXe5yl7vc5S53uctd7nKXu9zlLne5y13ucpe73OUud7nLXe5yl7vc5S53uctd7nKXu9zlLne5y13ucpe73OUud7nLXe5yl7vc5S53uctd7nKXu9zlLne5y13ucpe73OUud7nLXe5yl7vc5S53uctd7nKXu9zlLne5y13ucpe73OUud7nLXe5yl7vc5S53uctd7nKXu9zlLne5y13ucpe73OUud7nLXe5yl7vc5S53uctd7nKXu9zlLne5y13ucpe73OUud7nLXe5yl7vc5S53uctd7nL/r7n/AXZOcr5AXZxvAAAAAElFTkSuQmCC"
        }
      ]
    },
    {
      "type": "h2",
      "source": "Tables"
    },
    {
      "type": "js",
      "source": "t = new DTable('First Name','Last Name', 'Born');\nt.addRow([ 'Albert', 'Einstein', new Integer(1879) ]);\nt.addRow([ 'Niels', 'Bohr', new Integer(1885) ]);\nt.addRow([ 'Richard', 'Feynman', new Integer(1918) ]);\nt.addRow([ 'Sean', 'Carroll', new Integer(1966), '**' ]);\n",
      "sequence": 141,
      "output": [
        {
          "type": "table",
          "columns": [
            "First Name",
            "Last Name",
            "Born",
            "C4"
          ],
          "rows": [
            [
              "sAlbert",
              "sEinstein",
              "i1879",
              "n"
            ],
            [
              "sNiels",
              "sBohr",
              "i1885",
              "n"
            ],
            [
              "sRichard",
              "sFeynman",
              "i1918",
              "n"
            ],
            [
              "sSean",
              "sCarroll",
              "i1966",
              "s**"
            ]
          ]
        }
      ]
    },
    {
      "type": "h2",
      "source": "File System Operations"
    },
    {
      "type": "js",
      "source": "FS.help",
      "sequence": 132,
      "output": [
        {
          "type": "text",
          "text": "FS provides access to the filesystem:\n   FS.exists(file)                    - tests whether the file exists\n   FS.freeSpace, getFreeSpace(path)   - returns the amount of free space\n   FS.isDirectory(path)               - tests whether the file denoted by this path is a directory\n   FS.isFile(path)                    - tests whether the file denoted by this path is a normal file\n   FS.isHidden(path)                  - tests whether the file denoted by this path is a hidden file\n   FS.lastModified(file)              - returns the file timestamp\n   FS.ls([path],...)                  - lists files\n   FS.newSync()                       - returns new file synchronization tool\n   FS.pwd()                           - returns the current directory\n   FS.sync(source, target)            - synchronizes target with the source directory, ignoring failures\n   FS.tempFile(prefix, suffix)        - creates a temporary file\n   FS.totalSpace, getTotalSpace(path) - returns the amount of total space\n   FS.touch(file)                     - updates the timestamp of a file, creating it if necessary"
        }
      ]
    },
    {
      "type": "h2",
      "source": "Network"
    },
    {
      "type": "js",
      "source": "NET.get('http://goryachev.com/img/download-64.png');",
      "sequence": 138,
      "output": [
        {
          "type": "image",
          "image": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAECElEQVR42u1aTU/UUBS9LTMwTAf5GgQUBkQ+XJqYmJjoD3ClRt2YuDMuiBuNO/0fJsatrnTFVoOICszghh2B+EXcaDSCunAj3ran8Chtp4PO6+vwXnMgTDu8nvNu37v39BHppptu0toiXaMKPeffK87vebrOn2YYTQyTYQAN1qYpR2/oAxPfDMBHukfDfFULIwsxGkyEcPIuKrTGVx1gWBCigUSww94jusTYYNjHT/ztnZuiW3x1F6PQWCK4z7xL0iO/KYjgnXtJc3x1P0Sw8DiYjRABK1skgw7v3By956uHGL2MdiEKUt2MGgUYYRxGFOSxQhjpFqBCq7EEeM0TJdEoY5BRxGOw7wQYY5QYPcI8sG8FKGgBtABaAC2AFkALkF4BDCeXr10AOx0+yGhjNAs+QSry/vM7DI9ZulKTAPdpkr8zTwv0ln/O0jO6iijIqG2Y2IZHhW86quavJkC4V5ACwyQO+b0KoLxhYoe9aHisg9iGz/CII0DU9584/qGCholoeKz7yP32kYgSYAnXi8evNBgm1ep9UYQwAYLIp8YwiYoAvwhBRxR5MQJe8Nqw0zBpVcEvMOgVXYwMY1GEWj8XH58HdFNFw8RwbqJM72KJEPfwk5+nT9zPMVUFaOJ0p5Mfhc//RQQ/+TJ9p0t0hvuZYBxlDKjmGZrOhDTJI1P+RxGCyJ+ikxh9O00exkrQwcip4hqbWJIsTlyP8E1/2ZMIfvIV+iGQHxdGv4hcoFmV9wYGRiLnZGsnuJpboK81ibB75NfpNp0D+Qk8+yVhCcyplhIbiIK8E54XeMTiirB7wvsmjLxHfgih34k+lHxrZAoidAaKEJYHxCPvZYDKlsgGbqwZN+qKsEh/tggu+8gv+2qBeOSVfmm6W4TjPHPHqfhu0Nm0k68WCeHktye88bSTDxeBqI+m6fEO4k9pShj1MSx1pbSTDxOhA8vYABKaEYz2KIgP41wvBEs1+SAR8ljDi040uFXdIDCAUS/imnwjkPeLkEUCU0A0dIGwjW581oYyN1WbpYwYMEEoCyOjFSFeACx8JhqfZsz/nYgLtL3fz7XAV6WhTDPJ7S+M3u8nGwnY5eqQT8AuD9vvJ/tIbH9h1H6/JESQbpdXs79lH9LtclUjQJJdbjhLj4pzwCO6I7jF3fVyi1372156VFoFJNrlov29pgz5y3QalaSULbYmJpgDztJjz772BGTD3twgCzOcCz6kuwHmSZ/PMK2b8WlB6X507JW1Y5Ixir7tezgkPP91M0w9+7sFSUcXlh6vrC1JxiD67gP5NpKwb0AUwULIeWVtj2QU0Xe7kAVKeVVmCKVtDpOO5StvZcBC37kk/AOxxs8AWcnIBJTEyhoi9YRuuumm257bX+k5CFe4f87FAAAAAElFTkSuQmCC"
        }
      ]
    }
  ]
}